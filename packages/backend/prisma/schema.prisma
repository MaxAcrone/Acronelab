// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  role      String   @default("USER") // USER, ADMIN, MODERATOR
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile       Profile?
  subscriptions Subscription[]
  payments      Payment[]

  @@map("users")
}

model Profile {
  id          String  @id @default(cuid())
  userId      String  @unique
  bio         String?
  website     String?
  location    String?
  company     String?
  jobTitle    String?
  skills      String? // JSON string of skills
  experience  String? // JSON string of experience
  education   String? // JSON string of education
  socialLinks String? // JSON string of social links
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String
  stripeCustomerId  String?  @unique
  stripePriceId     String?
  stripeSubscriptionId String? @unique
  status            String   @default("INACTIVE") // ACTIVE, INACTIVE, PAST_DUE, CANCELED, UNPAID
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  stripePaymentIntentId String @unique
  amount            Int
  currency          String @default("usd")
  status            String   @default("PENDING") // PENDING, SUCCEEDED, FAILED, CANCELED
  description       String?
  metadata          String? // JSON string
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}
